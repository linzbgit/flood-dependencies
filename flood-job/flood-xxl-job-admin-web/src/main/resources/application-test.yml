########################################################

### undertow setting.

########################################################
server:
  undertow:
    accesslog:
      #Undertow access log directory.
      dir: /
      #Whether to enable the access log.
      enabled: false
      #Format pattern for access logs.(%t [%I] %a %r %s (%b Byte) (%T ms) )
      pattern: common
      #Log file name prefix.
      prefix: access_log.
      #Whether to enable access log rotation.
      rotate: true
      #Log file name suffix.
      suffix: log
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作
    # 如果每次需要 ByteBuffer 的时候都去申请，对于堆内存的 ByteBuffer 需要走 JVM 内存分配流程（TLAB -> 堆），对于直接内存则需要走系统调用，这样效率是很低下的。
    # 所以，一般都会引入内存池。在这里就是 `BufferPool`。
    # 目前，UnderTow 中只有一种 `DefaultByteBufferPool`，其他的实现目前没有用。
    # 这个 DefaultByteBufferPool 相对于 netty 的 ByteBufArena 来说，非常简单，类似于 JVM TLAB 的机制
    # 对于 bufferSize，最好和你系统的 TCP Socket Buffer 配置一样
    # `/proc/sys/net/ipv4/tcp_rmem` (对于读取)
    # `/proc/sys/net/ipv4/tcp_wmem` (对于写入)
    # 在内存大于 128 MB 时，bufferSize 为 16 KB 减去 20 字节，这 20 字节用于协议头
    buffer-size: 16364
    # 是否分配的直接内存(NIO直接分配的堆外内存)，这里开启，所以java启动参数需要配置下直接内存大小，减少不必要的GC
    # 在内存大于 128 MB 时，默认就是使用直接内存的
    directBuffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个读线程和一个写线程
      io: 4
      # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
      # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
      worker: 128
    # http post body 大小，默认为 -1B ，即不限制
    max-http-post-size: -1B
    # 是否在启动时创建 filter，默认为 true，不用修改
    eager-filter-init: true
    # 限制路径参数数量，默认为 1000
    max-parameters: 1000
    # 限制 http header 数量，默认为 200
    max-headers: 200
    # 限制 http header 中 cookies 的键值对数量，默认为 200
    max-cookies: 200
    # 是否允许 / 与 %2F 转义。/ 是 URL 保留字,除非你的应用明确需要，否则不要开启这个转义，默认为 false
    allow-encoded-slash: false
    # 是否允许 URL 解码，默认为 true，除了 %2F 其他的都会处理
    decode-url: true
    # url 字符编码集，默认是 utf-8
    url-charset: utf-8
    # 响应的 http header 是否会加上 'Connection: keep-alive'，默认为 true
    always-set-keep-alive: true
    # 请求超时，默认是不超时，我们的微服务因为可能有长时间的定时任务，所以不做服务端超时，都用客户端超时，所以我们保持这个默认配置
    no-request-timeout: -1
    # 是否在跳转的时候保持 path，默认是关闭的，一般不用配置
    preserve-path-on-forward: false
    options:
      # spring boot 没有抽象的 xnio 相关配置在这里配置，对应 org.xnio.Options 类
      socket:
        SSL_ENABLED: false
      # spring boot 没有抽象的 undertow 相关配置在这里配置，对应 io.undertow.UndertowOptions 类
      server:
        ALLOW_UNKNOWN_PROTOCOLS: false
########################################################

### database setting.

########################################################
spring:
  datasource:
     #数据库组件 druid相关配置
    type: com.alibaba.druid.pool.DruidDataSource
    # JDBC 配置(驱动类自动从url的mysql识别,数据源类型自动识别)
    url: jdbc:mysql://127.0.0.1:3306/center_job?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
    username: 'root'
    password: 'root'
    driver-class-name:  com.mysql.cj.jdbc.Driver
    druid:
      #配置初始化大小/最小/最大
      initial-size: 1
      min-idle: 2
      max-active: 12
      #获取连接等待超时时间
      max-wait: 30000
      validation-query: select 1
      validation-query-timeout: 5
      test-on-borrow: true
      test-on-return: false
      test-while-idle: true
      remove-abandoned: true
      remove-abandoned-timeout: 120
      #间隔多久进行一次检测，检测需要关闭的空闲连接
      time-between-eviction-runs-millis: 30000
      #一个连接在池中最小生存的时间
      min-evictable-idle-time-millis: 60000
      #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: 20
      #监控统计拦截的filters
      filters: stat,wall
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=10
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
#mybatis:
#  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml
########################################################

### i18n setting.

########################################################
---
spring:
  messages:
    basename: i18n/message   #指定message的basename，多个以逗号分隔，如果不加包名的话，默认从classpath路径开始，默认: message
    cache-duration: 3600  #设定加载的资源文件缓存失效时间，-1的话为永不过期，默认为-1
    encoding: UTF-8   #设定Message bundles的编码，默认: UTF-8
########################################################

### log4j setting.

########################################################
logging:
  config: classpath:log4j2-test.xml
########################################################

### 服务监控 actuator

########################################################
management:
  health:
    mail:
      enabled: false
  server:
    base-path: /actuator
  endpoint:
    health:
      show-details: ALWAYS
  endpoints:
    web:
      exposure:
        include: '*'   #开启所有端点2.0以后默认关闭的
########################################################

### freemarker resources setting.

########################################################
---
spring:
  freemarker:
    charset: UTF-8
    request-context-attribute: request
    settings:
      number_format: 0.##########
    suffix: .ftl
    templateLoaderPath: classpath:/templates/
  mvc:
    servlet:
      load-on-startup: 0
    static-path-pattern: /static/**
  resources:
  web:
    resources:
      static-locations: classpath:/static/
########################################################

### spring mail

########################################################
---
spring:
  mail:
    from: 100958841@qq.com
    host: smtp.qq.com
    password: 1314dmdm
    port: 25
    properties:
      mail:
        smtp:
          auth: true
          socketFactory:
            class: javax.net.ssl.SSLSocketFactory
          starttls:
            enable: true
            required: true
    username: 100958841@qq.com
########################################################

### xxl-job, access token

########################################################
### xxl-job, access token
xxl.job.accessToken:

### xxl-job, i18n (default is zh_CN, and you can choose "zh_CN", "zh_TC" and "en")
xxl.job.i18n: zh_CN
## xxl-job, triggerpool max size
xxl.job.triggerpool.fast.max: 200
xxl.job.triggerpool.slow.max: 100

### xxl-job, log retention days
xxl.job.logretentiondays: 30